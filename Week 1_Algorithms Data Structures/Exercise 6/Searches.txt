STEP 1: UNDERSTANDING SEARCH ALGORITHMS

1. LINEAR SEARCH: Also known as sequential search, is a simple searching algorithm that checks each 
element in a list one by one until the desired element is found or the end of the list is reached.

How It Works:
1. Start from the first element of the list.
2. Compare the target value with the current element.
3. If they match, return the index of the element.
4. If they don’t match, move to the next element and repeat the comparison.
5. If the end of the list is reached and no match is found, return a value indicating the target is not present (e.g., -1).

Time Complexity:
- Best Case: O(1) – The target is the first element in the list.
- Average Case: O(n) – The target could be anywhere in the list.
- Worst Case: O(n) – The target is not in the list or is the last element.

Advantages:
- Simple to implement.
- Works on unsorted lists.

Disadvantages:
- Inefficient for large lists because it may require checking every element.

Example:

public int linearSearch(int[] array, int target) {
    for (int i = 0; i < array.length; i++) {
        if (array[i] == target) {
            return i;
        }
    }
    return -1; 
}

2. BINARY SEARCH: It is an efficient algorithm for finding a target value in a sorted list 
by repeatedly dividing the search interval in half.

How It Works:
1. Start with the entire list.
2. Find the middle element of the list.
3. If the middle element is the target value, return its index.
4. If the target value is less than the middle element, repeat the search in the left half of the list.
5. If the target value is greater than the middle element, repeat the search in the right half of the list.
6. If the interval is empty, return a value indicating the target is not present (e.g., -1).

Time Complexity:
- Best Case: O(1) – The target is the middle element.
- Average Case: O(log n) – The search interval is halved each step.
- Worst Case: O(log n) – The search interval reduces until empty.

Advantages:
- Much faster than linear search for large lists (due to logarithmic time complexity).
- Efficient for sorted lists.

Disadvantages:
- Requires the list to be sorted.
- More complex to implement compared to linear search.

Example:
public int binarySearch(int[] array, int target) {
    int left = 0;
    int right = array.length - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (array[mid] == target) {
            return mid; 
        } else if (array[mid] < target) {
            left = mid + 1; 
        } else {
            right = mid - 1; 
        }
    }
    return -1; 
}
